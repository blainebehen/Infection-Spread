# -*- coding: utf-8 -*-
"""
Created on Thu Feb  8 10:49:00 2024

@author: bsbehen
"""

import numpy as np
import networkx as nx
from matplotlib import pyplot as plt

########################################################################
#Setting Up Graph Where Each Person Is Randomly 
#Given A Color Indicating Initial Infection Status
#Red for Infected, Green for Uninfected
People = np.arange(20) #Dictate Number of People Here
Graph = nx.complete_graph(len(People))
InitialColors = []
for i in range(0,len(People)):
    InitialStatus = np.random.choice(['red','green'], p=[0.15,0.85])
    InitialColors.append(InitialStatus)
    Graph.add_node(i, InfectionStatus = InitialStatus)
nx.draw_circular(Graph, with_labels = True, node_color=InitialColors)
plt.show()

########################################################################
#Setting Up Variables
NumberofRounds = 0
TimesRun = 10
Storage = np.zeros([TimesRun + 1,len(Graph)])
FinalColors = []

########################################################################
#Setting Initial Row of Storage
for i in range(0,len(Graph)):
    if Graph.nodes[i]['InfectionStatus'] == 'red':
        Storage[0,i] = 1
    else:
        Storage[0,i] = 0

########################################################################
#Running Simulation Based on Colors of Nodes Indicating Infection Status
while NumberofRounds < TimesRun:
    for i in range(0,len(Graph)):
        if Graph.nodes[i]['InfectionStatus'] == 'red':
            for j in range(0,len(Graph)):
                if Graph.nodes[j]['InfectionStatus'] == 'green':
                    Graph.nodes[j]['InfectionStatus'] = np.random.choice(['red','green'],p=[0.006,0.994])
        if Graph.nodes[i]['InfectionStatus'] == 'red':
            Storage[NumberofRounds + 1,i] = 1
        else:
            Storage[NumberofRounds + 1,i] = 0
    NumberofRounds = NumberofRounds + 1
    
for i in range(0,len(Graph)):
    FinalColors.append(Graph.nodes[i]['InfectionStatus'])

########################################################################
#Display Last Graph and Storage Matrix
nx.draw_circular(Graph, with_labels = True, node_color=FinalColors)
plt.show()
print(Storage)
